---
- hosts: all # run on the "all" hosts category from ansible-hosts.txt
  become: true
  remote_user: ssaid
  tags: base_install
  tasks:
    # https://kubernetes.io/docs/setup/production-environment/container-runtimes/#forwarding-ipv4-and-letting-iptables-see-bridged-traffic
  - name: Enable modules in kernel
    copy:
      dest: "/etc/modules-load.d/k8s.conf"
      content: |
        overlay
        br_netfilter

  - name: Disable swappiness and pass bridged IPv4 traffic to iptable's chains
    copy:
      dest: "/etc/sysctl.d/k8s.conf"
      content: |
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1

  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable
      state: present
  - name: Install containerd
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - containerd.io

  - name: Configure SystemD CGROUP Driver
    copy:
      dest: "/etc/containerd/config.toml"
      content: |
        version = 2
        [plugins]
          [plugins."io.containerd.grpc.v1.cri"]
          [plugins."io.containerd.grpc.v1.cri".containerd]
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                  runtime_type = "io.containerd.runc.v2"
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                    SystemdCgroup = true
  
  - name: Configure CRICTL 
    copy:
      dest: "/etc/crictl.yaml"
      content: |
        runtime-endpoint: unix:///var/run/containerd/containerd.sock
        image-endpoint: unix:///var/run/containerd/containerd.sock
        timeout: 10
        debug: false
      
  - name: Verify containerd is started
    service:
      name: containerd
      state: started
      enabled: yes
      
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb >= 0
    
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        # it is usually recommended to specify which version you want to install
        - kubelet=1.27.3-00
        - kubeadm=1.27.3-00
        - kubectl=1.27.3-00
        
  - name: hold kubernetes binary versions (prevent from being updated)
    dpkg_selections:
      name: "{{ item }}"
      selection: hold
    loop:
      - kubelet
      - kubeadm
      - kubectl
        
# this has to do with nodes having different internal/external/mgmt IPs
# {{ node_ip }} comes from vagrant, which I'm not using yet
#  - name: Configure node ip - 
#    lineinfile:
#      path: /etc/default/kubelet
#      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted
      
  - name: reboot to apply swap disable
    reboot:
      reboot_timeout: 180 #allow 3 minutes for reboot to happen
# 02
- hosts: kube_server
  tags: init_cluster
  become: true
  remote_user: ssaid
  vars_files:
    - ansible-vars.yml
  tasks:
  - name: restart containerd
    service:
      name: containerd
      state: restarted
  
  - name: Initialize Kubernetes cluster
    command: "kubeadm init --pod-network-cidr {{ pod_cidr }}"
    args:
      creates: /etc/kubernetes/admin.conf # skip this task if the file already exists
    register: kube_init
    
  - name: show kube init info
    debug:
      var: kube_init
      
  - name: Create .kube directory in user home
    file:
      path: "{{ home_dir }}/.kube"
      state: directory
      owner: 1000
      group: 1000

  - name: Configure .kube/config files in user home
    copy:
      src: /etc/kubernetes/admin.conf
      dest: "{{ home_dir }}/.kube/config"
      remote_src: yes
      owner: 1000
      group: 1000
      
  - name: restart kubelet for config changes
    service:
      name: kubelet
      state: restarted
      
  - name: get calico networking
    get_url:
      url: https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
      dest: "{{ home_dir }}/calico.yaml"
      
  - name: apply calico networking
    become: no
    command: kubectl apply -f "{{ home_dir }}/calico.yaml"
    
  - name: get dashboard
    get_url:
      url: https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
      dest: "{{ home_dir }}/dashboard.yaml"
    
  - name: apply dashboard
    become: no
    command: kubectl apply -f "{{ home_dir }}/dashboard.yaml"
# 03
- hosts: kube_server
  tags: get_join
  become: false
  remote_user: ssaid
  vars_files:
    - ansible-vars.yml
  tasks:
  - name: Extract the join command
    become: true
    command: "kubeadm token create --print-join-command"
    register: join_command
  - name: show join command
    debug:
      var: join_command
  - name: Save kubeadm join command for cluster
    local_action: copy content={{ join_command.stdout_lines | last | trim }} dest={{ join_command_location }} # defaults to your local cwd/join_command.out
# 04
- hosts: kube_agents
  tags: do_join
  become: true
  remote_user: ssaid
  vars_files:
    - ansible-vars.yml
  tasks:
  - name: restart docker
    service:
      name: containerd
      state: restarted
  - name: read join command
    debug: msg={{ lookup('file', join_command_location) }}
    register: join_command_local
  - name: show join command
    debug:
      var: join_command_local.msg
  - name: join agents to cluster
    command: "{{ join_command_local.msg }}"

- hosts: all
  remote_user: ssaid
  tags: post_install
  tasks:
  - name: Setup aliases
    ansible.builtin.blockinfile:
      path: ~/.bashrc
      block: |
        alias k='kubectl' 

- hosts: kube_server
  remote_user: ssaid
  tags: fetch_config
  tasks:
  - name: Fetch the .kube/config
    fetch:
      src: ~/.kube/config
      dest: ./admin.conf 
      flat: true
